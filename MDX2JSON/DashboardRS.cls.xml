<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.DashboardRS">
<Super>%SQL.CustomResultSet</Super>
<TimeCreated>63943,47866.588743</TimeCreated>

<Parameter name="folderName">
<Description>
Folder, from which we get Dashboards.</Description>
<Type>%String</Type>
<Default>Mobile</Default>
</Parameter>

<Parameter name="global">
<Default>^DeepSee.FolderItemD</Default>
</Parameter>

<Parameter name="dashclass">
<Default>%DeepSee.Dashboard.Definition</Default>
</Parameter>

<Method name="GetDashboardListSQL">
<Description>
Get SQL for folder, from which we get Dashboards. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderName:%String=..#folderName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set basesql = "SELECT MDX2JSON.ResolveText(title) AS title, fullName AS path, MDX2JSON.GetDashCover(bookCover) AS Cover FROM %DeepSee_Dashboard.Definition "
	set basefilter = "WHERE ((NOT (foldername %STARTSWITH '$TRASH' or foldername %STARTSWITH 'HIDDEN')) OR foldername IS NULL) AND (MDX2JSON.IsItemVisible(fullName) = 1) "
	return:folderName="" basesql _ basefilter
	set filter = "AND folderName %STARTSWITH '" _ folderName _"'"
	return basesql _ basefilter _ filter
]]></Implementation>
</Method>

<Property name="title">
<Type>%String</Type>
</Property>

<Property name="path">
<Type>%String</Type>
</Property>

<Property name="Cover">
<Type>%String</Type>
</Property>

<Property name="id">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="folder">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="%OpenCursor">
<FormalSpec>folderName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	return:((folderName'="") && ('$IsObject(##class(%DeepSee.UserLibrary.Utils).%FindFolder(folderName)))) $$$ERROR($$$GeneralError,"Folder " _ folderName _ " does not exist")
    set ..id = ""
    set ..folder = folderName
    return $$$OK
]]></Implementation>
</Method>

<Method name="%Next">
<FormalSpec><![CDATA[&sc:%Library.Status]]></FormalSpec>
<PlaceAfter>%Execute</PlaceAfter>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
    set sc = $$$OK
    do ..SetNextId()
    set id = ..id
    return:id="" $$$NO
    
    set ..title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(##class(%DeepSee.UserLibrary.FolderItem).titleGetStored(id))
    set folder = ##class(%DeepSee.UserLibrary.FolderItem).folderGetStored(id)
    set name = ##class(%DeepSee.UserLibrary.FolderItem).nameGetStored(id)
    set ..path =  ##class(%DeepSee.Dashboard.Definition).fullNameCompute(id, folder, name)
    set ..Cover = ##class(MDX2JSON.Dashboard).GetDashCover(##class(%DeepSee.UserLibrary.FolderItem).bookCoverGetStored(id))
    
    return $$$YES
]]></Implementation>
</Method>

<Method name="SetNextId">
<Description>
Iterate over data global till we find dashboard definition
thet satisfies all conditions</Description>
<Implementation><![CDATA[
	set ..id = $Order(@..#global@(..id))
    if ((..id'="") && ('..CheckConditions(..id))) {
	    // we are not at the last row and we failed condition check
	    // so we get the next id
	    do ..SetNextId()	
    }
]]></Implementation>
</Method>

<Method name="CheckConditions">
<Description>
Check if element with that id satisfies our conditions</Description>
<FormalSpec>id</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	/// first we check that it's a dashboard (not a pivot, etc.)
	set oid = ##class(%DeepSee.UserLibrary.FolderItem).%ComposeOid(id)
    do ##class(%DeepSee.UserLibrary.FolderItem).%OnDetermineClass(oid, .class)
    return:class'=..#dashclass $$$NO
    
    /// second that it's not a hidden or deleted dashboard
    set folder = ##class(%DeepSee.UserLibrary.FolderItem).folderGetStored(id)
    set folderpath = ##class(%DeepSee.UserLibrary.Folder).%GetFullName(folder)
    return:(($e(folderpath,1,6)="$TRASH") || ($e(folderpath,1,6)="$TRASH")) $$$NO

    /// third we check if a dashboard is in a correct folder
    return:($e(folderpath,1,$l(..folder))'=..folder) $$$NO
    
    /// fourth we check if the user has access to a dashboard
	return:'..CheckItemResource(id) $$$NO
	
	return $$$YES
]]></Implementation>
</Method>

<Method name="CheckItemResource">
<Description>
Test if the current user has access to this item.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String,privilege:%String="USE"</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set access = $$$NO
	set resource = ..GetItemResource(id)
	if ((resource="")||($System.Security.Check(resource, privilege))) {
		set access = $$$YES
	}
	return access
]]></Implementation>
</Method>

<Method name="GetItemResource">
<Description>
Get the resource value for this item.
Also return the name of the folder that defines the resource or "" if it originates here.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>id:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set resource = ##class(%DeepSee.UserLibrary.FolderItem).resourceGetStored(id)
	if (resource="") {
		// inherit from folder
		if ##class(%DeepSee.UserLibrary.FolderItem).folderGetStored(id)'="" {
			set resource = ..GetFolderResource(##class(%DeepSee.UserLibrary.FolderItem).folderGetStored(id))
		}
	}
	return resource
]]></Implementation>
</Method>

<Method name="GetFolderResource">
<Description>
Get the resource value for this folder.
Also return the name of the folder that defines the resource.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (##class(%DeepSee.UserLibrary.Folder).resourceGetStored(folderId)'="") {
		return ##class(%DeepSee.UserLibrary.Folder).resourceGetStored(folderId)
	} elseif (##class(%DeepSee.UserLibrary.Folder).folderGetStored(folderId)'="") {
		return ..GetFolderResource(##class(%DeepSee.UserLibrary.Folder).folderGetStored(folderId))
	}
	return ""
]]></Implementation>
</Method>

<Method name="Test">
<Description>
do ##class(MDX2JSON.DashboardRS).Test()</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderName=""</FormalSpec>
<Implementation><![CDATA[
	new $namespace
	set $namespace = "Samples"
	set rs = ..%New(,folderName)
	do rs.%Display()
]]></Implementation>
</Method>
</Class>
</Export>
