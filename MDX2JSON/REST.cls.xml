<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.REST">
<Description><![CDATA[
Class for REST-like web api for MDX2JSON transformation (and XML/A).<br>
Example: send HTTP POST request to web application with Dispatch class <b>MDX2JSON.REST</b>
with body: { "MDX":"QUERY" }, where QUERY is a correct MDX statement, ex:  <br> 
{<br>
        "MDX": "SELECT NON EMPTY [Product].[P1].[Product Category].Members ON 0,NON EMPTY [Outlet].[H1].[Region].Members ON 1 FROM [HoleFoods]"<br>
} <br>
You can send requests to:<br> <ul>
    <li>webapplication/Test - to get test info, %request, %response and %session</li> 
    <li>webapplication/MDX - to get result in JSON format for MDX query</li>
    <li>webapplication/MDXDrillthrough - to get resulting listing in JSON format for MDX Drillthrough query</li>
    <li>webapplication/MDX2XMLA - to get result in XML/A format for MDX query</li>
</ul>

Dashboard related requests are:
 <ul>
    <li>webapplication/Dashboards - get all dashboards in a namespace (GET request).</li>
    <li>webapplication/Dashboards - get folder specific (recursively) dashboards in a namespace (POST request with {Folder:"FolderName"} body) ).</li>
    <li>webapplication/Dashboard - get all dashboard widgets (POST request with {Dashboard:"DashboardName"} body) with filters as part of dashboard.</li>
    <li>webapplication/Widgets - get all dashboard widgets (POST request with {Dashboard:"DashboardName"} body) with filters as part of widgets.</li>
</ul>
To get information about possible datasource (cube, pivot, kpi, metric) filters and filters' values:<br><ul>
    <li>webapplication/Filters - Same but with POST { "DataSource":"DataSourceName.ext","Values":0} body. If values = 1, then filters' values would also be provided.</li> 
</ul> 
        
To get information about pivot:<br><ul>
        <li>webapplication/DataSource- to get info about pivot (POST {DataSource:"Name of DS"})</li> </ul> 
        
To get information about system-wide defaults (format):<br><ul>
        <li>webapplication/Format - to get info about system-wide defaults (format). GET request </li> </ul> 
        
You can add a param Namespace to request to execute MDX in desired namespace (MDX2JSON package must be mapped to that namespace):<br>
webapplication/MDX?Namespace=Samples<br>

Example: send HTTP GET request to web application with Dispatch class <b>MDX2JSON.REST</b> and URL:<br>
/FilterValues/HoleFoods/[DateOfSale].[Actual].[MonthSold] -  to get information about possible values of [DateOfSale].[Actual].[MonthSold] in HoleFoods Cube.<br>
]]></Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<Super>MDX2JSON.AbstractREST</Super>
<TimeCreated>63165,65257.8179</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <!-- Send objects in this format: {"MDX":"QUERY"} HTTP method: POST -->
   <Route Url="/MDX" Method="POST" Call="WriteJSONfromMDX" Body="MDX"/>
   <Route Url="/MDX2JSONP" Method="POST" Call="WriteJSONPfromMDX" Body="MDX"/>  
   <Route Url="/MDXDrillthrough" Method="POST" Call="WriteDrillthroughJSON" Body="MDX"/>
   <Route Url="/MDX2XMLA" Method="POST" Call="WriteXMLAfromMDX" Body="MDX"/>  

   <!-- Get info about availible filters and their values -->
   <Route Url="/Filters" Method="POST" Call="WriteFiltersForDataSource"/>
   
   <!-- Get info about widgets-->
   <Route Url="/Dashboards" Method="GET" Call="GetDashboardList"/> 
   <Route Url="/Dashboards" Method="POST" Call="GetDashboardList" Body="Folder"/> 
   <Route Url="/Dashboard" Method="POST" Call="GetDashboard" Body="Dashboard"/>
   <Route Url="/Widgets" Method="POST" Call="GetWidgetsList" Body="Dashboard"/>
   
   <!-- Get info about system format and locale-->
   <Route Url="/Format" Method="GET" Call="GetFormat"/> 
       
   <!-- Get info about pivot-->
   <Route Url="/DataSource" Method="POST" Call="GetDataSource" Body="DataSource"/>   
     
   <!-- Valid but illicit, do not use-->
   <Route Url="/MDX/:query" Method="GET" Call="WriteJSONfromMDXURL"/>  
   <Route Url="/MDXfilters/:query" Method="GET" Call="WriteFiltersForMDX"/>

   <!-- Test method-->
   <Route Url="/Test" Method="GET" Call="Test"/>
   <Route Url="/Logout" Method="GET" Call="Logout"/>
 </Routes>
]]></Data>
</XData>

<Method name="Logout">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim %session As %CSP.Session
	set st = %session.Logout(1)
	set %session.EndSession = 1
	return st
]]></Implementation>
</Method>

<Method name="Test">
<Description><![CDATA[
Test method, outputs <b>%request</b>, <b>%response</b> and <b>%session</b> objects. ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    write "{""Status"": ""OK""}"
    return $$$OK
]]></Implementation>
</Method>

<Method name="GetDataSource">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).GetDataSource($$$R("DataSource"))
]]></Implementation>
</Method>

<Method name="GetWidgetsList">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).GetWidgetsList()<br>
Converts incoming request object (JSON: {Dashboard:"Dashboard Full Name"} and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).GetWidgetsList($$$R("Dashboard"))
]]></Implementation>
</Method>

<Method name="GetDashboard">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).GetDashboard()<br>
Converts incoming request object (JSON: {Dashboard:"Dashboard Full Name"} and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).GetDashboard($$$R("Dashboard"))
]]></Implementation>
</Method>

<Method name="GetDashboardList">
<Description>
Returns JSON array of (title, path) for all dashboards in namespace (accessible to current user).</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = $$$OK
    if %request.Method = "POST" {
	    set folderName = $$$R("Folder")
    } else {
    	set folderName = ##class(MDX2JSON.Dashboard).#folderName
    }
    return:'$IsObject(##class(%DeepSee.UserLibrary.Utils).%FindFolder(folderName)) $$$ERROR($$$GeneralError,"Folder " _ folderName _ " does not exist")
    set sql = ##class(MDX2JSON.Dashboard).GetDashboardListSQL(folderName)
    try {        
        do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
    } catch ex {
        set st = ex.AsStatus()
    }
    return st
]]></Implementation>
</Method>

<Method name="WriteDrillthroughJSON">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteDrillthroughJSON(pMDX).<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).WriteDrillthroughJSON($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDXURL">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  	set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(MDX)
  	return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
	set st = ##class(MDX2JSON.Utils).WriteFiltersForMDX(MDX)
	return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForDataSource">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForDataSource(pDataSource, pValues)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set DataSource = $$$R("DataSource")
    set Values = $$$R("Values")
    
   	set st = ##class(MDX2JSON.Utils).WriteFiltersForDataSource(DataSource,Values)
  	return st
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    try {
        set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX($$$R("MDX"))
    } catch ex {
        set st=ex.AsStatus()
    }

    return st
]]></Implementation>
</Method>

<Method name="WriteJSONPfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).WriteJSONPfromMDX($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="WriteXMLAfromMDX">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteXMLAfromMDX(pMDX)<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).WriteXMLAfromMDX($$$R("MDX"))
]]></Implementation>
</Method>

<Method name="GetFormat">
<Description>
Wrapper for ##class(MDX2JSON.Utils).GetFormat()</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[    return ##class(MDX2JSON.Utils).GetFormat()
]]></Implementation>
</Method>
</Class>
</Export>
