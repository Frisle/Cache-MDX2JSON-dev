<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.REST">
<Description><![CDATA[
Class for REST-like web api for MDX2JSON transformation (and XML/A).<br>
Example: send HTTP POST request to web application with Dispatch class <b>MDX2JSON.REST</b>
with body: { "MDX":"QUERY" }, where QUERY is a correct MDX statement, ex:  <br> 
{<br>
		"MDX": "SELECT NON EMPTY [Product].[P1].[Product Category].Members ON 0,NON EMPTY [Outlet].[H1].[Region].Members ON 1 FROM [HoleFoods]"<br>
} <br>
You can send requests to:<br> <ul>
	<li>webapplication/test - to get test info, %request, %response</li> 
	<li>webapplication/MDX - to get result in JSONP format for MDX query</li>
	<li>webapplication/MDXDrillthrough - to get resulting listing in JSON format for MDX Drillthrough query</li>
	<li>webapplication/MDX2XMLA - to get result in XML/A format for MDX query</li></ul> 
To get information about possible Cube's filters and filter's values:<br><ul>
		<li>webapplication/FilterValues/:cube - to get all filters for DeepSee Cube in JSON format.</li> 
		<li>webapplication/FilterValues/:cube/:filter - to get all values for Filter for DeepSee Cube in JSON format.</li></ul> 
Example: send HTTP GET request to web application with Dispatch class <b>MDX2JSON.REST</b> and URL:<br>
/FilterValues/HoleFoods/[DateOfSale].[Actual].[MonthSold] -  to get information about possible values of [DateOfSale].[Actual].[MonthSold] in HoleFoods Cube.]]></Description>
<IncludeCode>%ZEN.Utils,%occErrors</IncludeCode>
<Super>%CSP.REST</Super>
<TimeCreated>63165,65257.8179</TimeCreated>

<Parameter name="NAMESPACE">
<Default>TFOMS</Default>
</Parameter>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
	<!-- Send objects in this format: {"MDX":"QUERY"} HTTP method: POST	-->
   <Route Url="/MDX" Method="POST" Call="WriteJSONfromMDX"/>
   <Route Url="/MDX2JSONP" Method="POST" Call="WriteJSONPfromMDX"/>  
   <Route Url="/MDXDrillthrough" Method="POST" Call="WriteDrillthroughJSON"/>
   <Route Url="/MDX2XMLA" Method="POST" Call="WriteXMLAfromMDX"/>  

   <!-- Get info about availible filters and their values -->
   <Route Url="/FilterValues/:cube" Method="GET" Call="WriteFiltersForCube"/>
   <Route Url="/FilterValues/:cube/:filter" Method="GET" Call="WriteFilterValues"/> 
   
    <Route Url="/widgets/" Method="GET" Call="GetWidgets"/>    
    <Route Url="/dashboards/" Method="GET" Call="GetDashboardsList"/> 
     
   <!-- Valid but illicit, do not use-->
   <Route Url="/MDX/:query" Method="GET" Call="WriteJSONfromMDXURL"/>  
   <Route Url="/MDXfilters/:query" Method="GET" Call="WriteFiltersForMDX"/>

   <!-- Test method-->
   <Route Url="/Test" Method="GET" Call="Test"/>
 </Routes>
]]></Data>
</XData>

<Method name="Test">
<Description><![CDATA[
Test method, outputs <b>%request</b> and <b>%response</b> objects. ]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<h1>Status: OK!</h1><br>>
	zw %request
	&html<<br><br>>
	zw %response
	&html<<br><br>>
	zw %session
	quit $$$OK
]]></Implementation>
</Method>

<Method name="GetWidgets">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	#define get(%name) $get(%request.Data(%name,1))
	s wName = $$$get("w")
	q ..GetWidgetsList(wName)
]]></Implementation>
</Method>

<Method name="GetMdx">
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	zn ..#NAMESPACE
  	s pMdx =""
 	s st = $$$OK
  	try {
	   s tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.st)
	   $$$TOE(st, st)
	   
	   s tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
	   $$$TOE(st, tPivot.%CopyToComponent(tPivotTable))
	   
	   s rs = tPivotTable.%CreateResultSet(.st,.tParms,.tFilterInfo,.tAdvancedFilters,.tQueryText)
	   $$$TOE(st, st)
	   
	   s pMdx = tQueryText
  	} catch ex {
   		s st = ex.AsStatus()
  	}
  	q pMdx
]]></Implementation>
</Method>

<Method name="GetDashboardsList">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	try {
		set sql = "SELECT title, fullName As path FROM %DeepSee_Dashboard.Definition WHERE folderName = 'Mobile'"
		do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,sql)
	} catch ex {
		w $$$ZENJSSTR($System.Status.GetErrorText(ex.AsStatus()))
	}
	return $$$OK
]]></Implementation>
</Method>

<Method name="GetWidgetsList">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDashName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn ..#NAMESPACE
	set st = $$$OK
	try {
		
		&sql(
			SELECT TOP 1 ID into :tDashId
			FROM %DeepSee_Dashboard.Definition
			WHERE fullName=:pDashName
		)
		return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)

		set dash = ##class(%DeepSee.Dashboard.Definition).%OpenId(tDashId,,.st)

		return:($$$ISERR(st)) st
		s widgets = dash.widgets.%ConstructClone("true")
		//Widget : {type,  title, mdx}

		set widget = widgets.GetNext(.key)
		
		do {
			s out(key) =$lb(widget.subtype, widget.title, widget.dataSource) //..GetMdx(widget.dataSource))
			s widget = widgets.GetNext(.key)
		} while (key'="")

		do ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("type","title","mdx"),.out)
		
	} catch ex {
		set st = ex.AsStatus()
	}
	return st
]]></Implementation>
</Method>

<Method name="WriteDrillthroughJSON">
<Description><![CDATA[
Wrapper for ##class(MDX2JSON.Utils).WriteDrillthroughJSON(pMDX).<br>
Converts incoming request object and calls abovementioned method.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	zn ..#NAMESPACE
	set st = $$$OK
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
	quit:$$$ISERR(st) st
	set tMDX = obj.MDX
	set tMDX = $ZCVT(tMDX,"I","UTF8")
  	set st = ##class(MDX2JSON.Utils).WriteDrillthroughJSON(tMDX)
  	quit st
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDXURL">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(MDX)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFiltersForMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForMDX(pMDX)
Do not use.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>MDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set MDX = $ZCONVERT($ZCONVERT(MDX ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFiltersForMDX(MDX)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFiltersForCube">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFiltersForCube(pCube)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Cube = $ZCONVERT($ZCONVERT(Cube ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFiltersForCube(Cube)
  quit st
]]></Implementation>
</Method>

<Method name="WriteFilterValues">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteFilterValues(pCupe, pFilter)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Cube:%String,Filter:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  set Cube = $ZCONVERT($ZCONVERT(Cube ,"I","URL") ,"I","UTF8")
  set Filter = $ZCONVERT($ZCONVERT(Filter ,"I","URL") ,"I","UTF8")
  set st = ##class(MDX2JSON.Utils).WriteFilterValues(Cube, Filter)
  quit st
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Converts incoming request object and calls abovementioned method.</Description>
<ClassMethod>1</ClassMethod>
<ProcedureBlock>0</ProcedureBlock>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set callback=$get(%request.Data("callback",1),"")
	if callback'="" w callback_"("
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
	quit:$$$ISERR(st) st
	set tMDX = obj.MDX
	set tMDX = $ZCVT(tMDX,"I","UTF8")
	try {
		set st = ##class(MDX2JSON.Utils).WriteJSONfromMDX(tMDX)
	} catch ex {
		//zw obj
		set st=ex.AsStatus()
	}

  	if callback'="" w ")"
  	quit st
]]></Implementation>
</Method>

<Method name="WriteJSONPfromMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteJSONPfromMDX(pMDX)
Converts incoming request object and calls abovementioned method.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st = $$$OK
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
	quit:$$$ISERR(st) st
  	set st = ##class(MDX2JSON.Utils).WriteJSONPfromMDX(obj.MDX)
  	quit st
]]></Implementation>
</Method>

<Method name="WriteXMLAfromMDX">
<Description>
Wrapper for ##class(MDX2JSON.Utils).WriteXMLAfromMDX(pMDX)
Converts incoming request object and calls abovementioned method.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set st=$$$OK
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(%request.Content,,.obj,1)
	quit:$$$ISERR(st) st
  	set st = ##class(MDX2JSON.Utils).WriteXMLAfromMDX(obj.MDX)
  	quit st
]]></Implementation>
</Method>

<Method name="DispatchRequest">
<Description>
Dispatch a REST request according to URL and Method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUrl:%String,pMethod:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//d %response.SetHeader("Access-Control-Allow-Origin","*")
    #dim tSC As %Status = $$$OK
    #dim e As %Exception.AbstractException
    
    #dim tMatcher As %Regex.Matcher
    
    #dim tArgs,tClass,tMatchUrl,tMapEntry,tRegEx,tTarget,tAccess As %String
    #dim tI,tIndex As %Integer
    #dim tResourceMatched As %Boolean
    #dim tMethodMatched As %Boolean
    
    Try {
        #; Check that the effective user ( could be unknown user ) can access this resource
        Set tAccess=$SYSTEM.Security.Check($Piece($zu(90,21,$namespace),"^",4))
        If tAccess'["READ,WRITE"
        {
            #; Don't want the session token
            Set %response.OutputSessionToken=0
            
            #; Set the Http Status
            Set %response.Status="401 Unauthorized"
        
            #; Write out the header
            Do %response.WriteHTTPHeader()
            
            #; Done
            Quit
        }
        
        Set (tResourceMatched,tMethodMatched)=0
        
        #; Walk the dispatch map in collation order of defintion
        For tIndex=1:1 {
            
            #; Get the next map entry
            Set tMapEntry=..DispatchMap(tIndex) If tMapEntry="" Quit
             
            #; Pick out the RegEx
            Set tRegEx=$List(tMapEntry,1)
            
            #; Create a matcher
            Set tMatcher=##class(%Regex.Matcher).%New(tRegEx)
        
            #; Extract the match url from the application name
            Set tMatchUrl="/"_$Extract(pUrl,$Length(%request.Application)+1,*)
            
            #; Test each regular expression in turn, extracting the arguments,
            #; dispatching to the named method  
            If tMatcher.Match(tMatchUrl) {
                
                #; We have matched the resource
                Set tResourceMatched=1
                
                #; Now check method name
                If pMethod'=$List(tMapEntry,2) Continue
                
                Set tTarget=$List(tMapEntry,3)
                
                #; We have matched a method
                Set tMethodMatched=1
                
                #; Got a match, marshall the arguments
                If tMatcher.GroupCount {
                    For tI=1:1:tMatcher.GroupCount Set tArgs(tI)=tMatcher.Group(tI)
                    Set tArgs=tI
                } else {
                    Set tArgs=0
                }
                
                #; Check for optional ClassName prefix
                Set tClass=$classname()
                If tTarget[":" Set tClass=$Piece(tTarget,":"),tTarget=$Piece(tTarget,":",2)
                
                #; Dispatch
                Set tSC=$zobjclassmethod(tClass,tTarget,tArgs...)
                If $$$ISERR(tSC) Do ..Http500(##class(%Exception.StatusException).CreateFromStatus(tSC))
                
                #; Don't want multiple matches
                Quit
            }
        }
        
        #; Didn't have a match for the resource, report not found
        If tResourceMatched=0 Set tSC=..Http404() Quit
        
        #; Had a match for resource but method not matched
        If tMethodMatched=0 Set tSC=..Http405() Quit
            
    } Catch (e) {
        
        #; Issue a '500'
        Do ..Http500(e)
    }
    
    If ..#UseSession=0 Set %session.EndSession=1
    
    Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
