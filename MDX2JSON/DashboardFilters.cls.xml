<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.DashboardFilters">
<Description>
Class with methods related to DeepSee Dashboard and Widget processing.</Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<Super>MDX2JSON.Dashboard</Super>
<TimeCreated>63644,52893.543838</TimeCreated>

<Method name="WidgetsToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Definition widgets into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,*Widgetlist:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim widget As %DeepSee.Dashboard.Widget
    set Widgetlist = ##class(%ZEN.proxyObject).%New()
    set Widgetlist.widgets = ##class(%ListOfObjects).%New()
    set Widgetlist.filters = ##class(%ListOfObjects).%New()
    set Widgetlist.displayInfo = ..GetDashboardDisplayInfo(Dashboard)
    set Widgetlist.info = ..GetDashboardInfo(Dashboard)
    
    set st = $$$OK
    try {
	    for i=1:1:Dashboard.widgets.Count() {
			do Widgetlist.widgets.Insert(..WidgetToProxyObject(Dashboard.widgets.GetAt(i)))
			
			#dim filters As %ListOfObjects
			set filters = ..WidgetFiltersToProxyObject(Dashboard.widgets.GetAt(i))
			for j=1:1:filters.Count() {
				do Widgetlist.filters.Insert(filters.GetAt(j))
			}		
        }         
    } catch ex {
        set st = ex.AsStatus()
        do ex.Log() 
    }
    return st
]]></Implementation>
</Method>

<Method name="WidgetFiltersToProxyObject">
<Description>
Converts relevant parts of %DeepSee.Dashboard.Widget object into %ZEN.proxyObject.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    &sql(SELECT cubeName into :cube FROM %DeepSee_Dashboard.Pivot WHERE fullName=:Widget.dataSource)
	set:(SQLCODE'=0) cube=""

    set obj = ##class(%ListOfObjects).%New()    
	for i=1:1:Widget.controls.Count()
	{
		set filter = ..WidgetFilterToProxyObject(Widget,i,cube)
		do:$IsObject(filter) obj.Insert(filter)
	}
	return obj
]]></Implementation>
</Method>

<Method name="WidgetControlToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Number:%Integer,Cube:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	return:((Widget.controls.GetAt(Number).action="applyFilter") || (Widget.controls.GetAt(Number).action="setFilter")) ""
	return ##class(MDX2JSON.Dashboard).WidgetControlToProxyObject(Widget,Number,Cube)
]]></Implementation>
</Method>

<Method name="WidgetFilterToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Number:%Integer,Cube:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	return:'((Widget.controls.GetAt(Number).action="applyFilter") || (Widget.controls.GetAt(Number).action="setFilter")) ""
	return ##class(MDX2JSON.Dashboard).WidgetControlToProxyObject(Widget,Number,Cube)
]]></Implementation>
</Method>
</Class>
</Export>
