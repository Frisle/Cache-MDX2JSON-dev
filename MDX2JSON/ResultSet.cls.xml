<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.ResultSet">
<Super>%DeepSee.ResultSet</Super>
<TimeCreated>63463,69237.325048</TimeCreated>

<Method name="OutputJSON3">
<FormalSpec>pPageSize:%Integer,pCurrPage:%Integer,pRowLabels:%List="",pMaxRows:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
         
    set obj=##class(%ZEN.proxyObject).%New()
    
     if (..%Query.queryType = "DRILLTHROUGH") {
        set obj.Error = "DRILLTHROUGH queries are not supported"
        return obj.%ToJSON()
    }
    
    set tQueryKey = ..%QueryKey
	set st = ..%GetQueryStatus(..%Cube,tQueryKey)
	if (st < 100) {
	    hang 1
	    set st = ..%GetQueryStatus(..%Cube,tQueryKey)
	}

	if (st < 100) {
	    set obj.Error = $$$ZENJSSTR($System.Status.GetErrorText(st))_"}"
	    return obj
	}
     
    /* 
    Set tMaxCols = 500
    Set tStartRow = ((pCurrPage-1)*pPageSize)+1
    Set tEndRow = tStartRow + pPageSize - 1
    Set tRowCount = 0
    Set tColCount = 0
    // JMD1128 
    Set tMaxJSONRows = $S(pMaxRows="":2000,1:+pMaxRows)
    Set:tRowCount>tMaxJSONRows tRowCount = tMaxJSONRows
    Set:tColCount>tMaxCols tColCount = tMaxCols

    Set tStartRow = 1
    Set tEndRow = tStartRow + tRowCount - 1
    */                                           
                                                    
    set obj.Info = ..InfoToJSON() //returns proxy object
    set obj.Cols = ..AxesToJSON()
    set obj.Data = ..DataToJSON()
    
    return obj.%ToJSON()
]]></Implementation>
</Method>

<Method name="InfoToJSON">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set tCubeIndex = ..%CubeKey
	set tCubeName = $$$UPPER(..%Cube)
	set tQueryKey = ..%QueryKey

	set tAxisCount = ..%GetAxisCount()
	for a = 1:1:tAxisCount {
	    set tAxisSize(a) = ..%GetAxisSize(a)
	    set tAxisKeys(a) = $G($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"axis",a))
	}
	
	set tColCount = $G(tAxisSize(1))
	set tRowCount = $G(tAxisSize(2))

	// find name of cube in original case
	set tCubeClass = $G($$$DeepSeeMetaGLVN("cubes",tCubeName))
	set tCubeName = $G($$$DeepSeeMetaGLVN("classes",tCubeClass))
																	
																	
	set info=##class(%ZEN.proxyObject).%New()
	set info.cubeName = tCubeName
	set info.cubeClass = tCubeClass
	set info.rowCount = tRowCount
	set info.colCount = tColCount																																	 
														    
    return info
]]></Implementation>
</Method>

<Method name="AxesToJSON">
<ReturnType>%ListOfDataTypes</ReturnType>
<Implementation><![CDATA[
    set tCubeIndex = ..%CubeKey
    set tQueryKey = ..%QueryKey
    set tAxisCount = ..%GetAxisCount()

    set axes=##class(%ListOfDataTypes).%New()
    

	for a = 1:1:tAxisCount {
        set tAxisSize(a) = ..%GetAxisSize(a)
        set tAxisKeys(a) = $G($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"axis",a))
        do axes.Insert(..ProcessOneAxis(tCubeIndex,tAxisKeys(a),a))
    }

    return axes
]]></Implementation>
</Method>

<Method name="ProcessOneAxis">
<FormalSpec>CubeIndex,AxisKey,AxisNumber</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set axis=##class(%ZEN.proxyObject).%New()
    set axis.spec = $G($$$DeepSeeAxisGLVN(CubeIndex,AxisKey,"spec"))
    set axis.tuples = ##class(%ListOfDataTypes).%New()
    do axis.tuples.Insert(..ProcessOneAxisCell(CubeIndex,AxisKey,AxisNumber,1))
    
    Return axis
]]></Implementation>
</Method>

<Method name="ProcessOneAxisCell">
<FormalSpec>CubeIndex,AxisKey,AxisNumber,Node</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set tCaption = ""
    set cell=##class(%ZEN.proxyObject).%New()
    
    Set tCubeName = $$$UPPER(..%Cube)
    Set tQueryKey = ..%QueryKey
    
    set tNode = $G($$$DeepSeeAxisGLVN(CubeIndex,AxisKey,"axes",Node))
    
    Set tCaption = $LG(tNode,5)
    /*
    Set tType = $LG(tNode,1)
    Set tParent = $LG(tNode,4)
    Set tMbrId = $LG(tNode,6)
    Set tDimNo = +$LG(tNode,9)
    Set tHierNo = +$LG(tNode,10)
    Set tLevelNo = +$LG(tNode,11)
    Set tFmt = $LG(tNode,12)*/
    
    set tAxisCaption = ""
    //do ##class(%DeepSee.Utils).%GetDimensionCaption(tCubeName,tDimNo, tHierNo,tLevelNo, .tAxisCaption)
    set cell.caption = tCaption //$ZCVT(tCaption,"O","UTF8")
    set cell.path = ##class(%DeepSee.Query.Engine).%GetSpecForAxisNode(tCubeName,tQueryKey, AxisNumber, Node)
    
    if ($D($$$DeepSeeAxisGLVN(CubeIndex,AxisKey,"axes",Node,"ch")) = 10)
    {
        set cell.children = ##class(%ListOfDataTypes).%New()
        set key = $O($$$DeepSeeAxisGLVN(CubeIndex,AxisKey,"axes",Node,"ch",""))
        while (key'="")
        {
            do cell.children.Insert(..ProcessOneAxisCell(CubeIndex,AxisKey,AxisNumber,key))
            set key = $O($$$DeepSeeAxisGLVN(CubeIndex,AxisKey,"axes",Node,"ch",key))
        }
    } 

    Return cell
]]></Implementation>
</Method>

<Method name="DataToJSON">
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set data = ##class(%ListOfDataTypes).%New()
	
	Set tCubeIndex = ..%CubeKey
    Set tQueryKey = ..%QueryKey
	Set tAxisCount = ..%GetAxisCount()
	
	set tNodeNo = ""
	
	// Initial cell address
	For a=1:1:tAxisCount {
		Set tItemNo(a) = $O($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"leaf",a,""),1,tNodeNo)
		Set tAddr(a) = $G(tNodeNo)
	}

	set tNodeNo = ""
	
	If (tAxisCount = 1) {
		Set tRowCount = 1
		Set c = 0
		While (tItemNo(1)'="") { //&&(c<tMaxCols))
			d data.Insert(..%GetValue(tAddr(1)))
			Set c = c + 1
			Set tItemNo(1) = $O($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"leaf",1,tItemNo(1)),1,tNodeNo)
			Set tAddr(1) = tNodeNo
		}
	}
	Else {
		Set tCellCount = 0
		Set row = 0 // actual row #
		While(tItemNo(2)'="") { //&&(row<tEndRow))
			Set row = row + 1
			//If (row >= tStartRow) {
				Set c = 0
				Set tItemNo(1) = $O($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"leaf",1,""),1,tNodeNo)
				Set tAddr(1) = tNodeNo
				While (tItemNo(1)'="") { //&&(c<tMaxCols))
					Set c = c + 1
					Set tValue = $Case(tAxisCount,
						0:..%GetValue(),
						1:..%GetValue(tAddr(1)),
						2:..%GetValue(tAddr(1),tAddr(2)),
						3:..%GetValue(tAddr(1),tAddr(2),tAddr(3)),
						4:..%GetValue(tAddr(1),tAddr(2),tAddr(3),tAddr(4)),
						5:..%GetValue(tAddr(1),tAddr(2),tAddr(3),tAddr(4),tAddr(5)),
						6:..%GetValue(tAddr(1),tAddr(2),tAddr(3),tAddr(4),tAddr(5),tAddr(6)),
						7:..%GetValue(tAddr(1),tAddr(2),tAddr(3),tAddr(4),tAddr(5),tAddr(6),tAddr(7)),
						:"")
					d data.Insert(tValue)
					Set tCellCount = tCellCount + 1

					Set tItemNo(1) = $O($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"leaf",1,tItemNo(1)),1,tNodeNo)
					Set tAddr(1) = tNodeNo
				}
			//}
			Set tItemNo(2) = $O($$$DeepSeeResultsGLVN(tCubeIndex,tQueryKey,"leaf",2,tItemNo(2)),1,tNodeNo)
			Set tAddr(2) = tNodeNo
		}
	}

	return data
]]></Implementation>
</Method>
</Class>
</Export>
