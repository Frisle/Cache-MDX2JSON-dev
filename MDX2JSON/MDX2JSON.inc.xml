<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Routine name="MDX2JSON.MDX2JSON" type="INC"><![CDATA[
#include %occErrors
#include %ZEN.Utils
#define get(%name) $get(%request.Data(%name,1))
#define Debug $d(%request.Data("Debug"))
#define R(%property) %request.Content.##Expression(%property)
#define Public ((%request.GetCgiEnv("SERVER_PORT") = 80) || (%request.GetCgiEnv("SERVER_PORT") = 443))
#define Private '$$$Public

#; For work with dynamic objects
#if $$$comClassDefined("%Library.Array")
	#define NewDynObj ##class(%Object).%New()
	#define NewDynDTList ##class(%Array).%New()
	#define NewDynObjList $$$NewDynDTList
	#define Insert(%obj,%element) do %obj.$push(%element)
	#define DynObjToJSON(%obj) w %obj.$toJSON()
	#define ListToJSON(%obj) $$$DynObjToJSON(%obj)
	#define ListSize(%obj) %obj.$size()
	#define ListGet(%obj,%i) %obj.$get(%i-1)
#else
	#define NewDynObj ##class(%ZEN.proxyObject).%New()
	#define NewDynDTList ##class(%ListOfDataTypes).%New()
	#define NewDynObjList ##class(%ListOfObjects).%New()
	#define Insert(%obj,%element) do %obj.Insert(%element)
	#define DynObjToJSON(%obj) do %obj.%ToJSON()
	#define ListToJSON(%obj) do ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(%obj)
	#define ListSize(%obj) %obj.Count()
	#define ListGet(%obj,%i) %obj.Get(%i)
#endif

]]></Routine>
</Export>
