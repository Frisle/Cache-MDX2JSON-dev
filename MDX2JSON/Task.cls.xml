<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Task">
<Description>
Task to check a role and add to privileges to it for MDX2JSON access</Description>
<Super>%SYS.Task.Definition</Super>
<TimeCreated>63939,44120.745474</TimeCreated>

<Parameter name="TaskName">
<Default>MDX2JSON access task</Default>
</Parameter>

<Property name="NamespaceList">
<Description>
Comma separated list of namespaces, to give access to Role. * means all.</Description>
<Type>%String</Type>
<InitialExpression>"*"</InitialExpression>
</Property>

<Property name="Role">
<Description>
Role to give access to</Description>
<Type>%String</Type>
<InitialExpression>"MDX2JSON"</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set resourcelist = ##class(MDX2JSON.Installer).BuildResourceList(..NamespaceList)
	set ns = $Namespace 
	zn "%SYS"
	if ##class(Security.Roles).Exists(..Role) {
		set properties("Resources")=resourcelist
		set st = ##class(Security.Roles).Modify(..Role, .properties)
		zn ns
		set st1 = ##class(MDX2JSON.Installer).GrantSelectToUser(..Role, ..NamespaceList)
		set st2 = ##class(MDX2JSON.Installer).GrantExecuteToUser(..Role, ..NamespaceList)
		set st = $$$ADDSC(st,$$$ADDSC(st1,st2))
	} else {
		zn ns
		set st = $$$ERROR($$$RoleDoesNotExist,..Role)
	}
	return st
]]></Implementation>
</Method>
</Class>
</Export>
