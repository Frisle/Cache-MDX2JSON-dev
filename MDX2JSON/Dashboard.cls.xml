<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Dashboard">
<Description>
Class with methods related to DeepSee Dashboard and Widget processing.</Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeCreated>63568,54242.448605</TimeCreated>

<Parameter name="folderName">
<Description>
Folder, from which we get Dashboards.</Description>
<Type>%String</Type>
<Default>Mobile</Default>
</Parameter>

<Method name="GetDashboardListSQL">
<Description>
Get SQL for folder, from which we get Dashboards. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderName:%String=..#folderName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set basesql = "SELECT MDX2JSON.ResolveText(title) AS title, fullName AS path, MDX2JSON.GetDashCover(bookCover) AS Cover FROM %DeepSee_Dashboard.Definition "
	set basefilter = "WHERE ((NOT (foldername %STARTSWITH '$TRASH' or foldername %STARTSWITH 'HIDDEN')) OR foldername IS NULL) AND (MDX2JSON.IsItemVisible(fullName) = 1) "
	return:folderName="" basesql _ basefilter
	set filter = "AND folderName %STARTSWITH '" _ folderName _"'"
	return basesql _ basefilter _ filter
]]></Implementation>
</Method>

<Method name="GetDashCover">
<Description><![CDATA[
Extracts dashboard cover from %DeepSee.Dashboard.Definition class bookCover property.<br>
Usage: Select MDX2JSON.Dashboard_GetDashCover(bookCover) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bookCover:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>GetDashCover</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(bookCover,,.obj,1)
	return:$isobject(obj) obj.background.src
    return ""
]]></Implementation>
</Method>

<Method name="IsItemVisible">
<Description><![CDATA[
Check visibility of folder item to user.<br>
Usage: Select fullname, MDX2JSON.IsItemVisible(fullname) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>fullName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>IsItemVisible</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set visible = ##class(%DeepSee.UserLibrary.Utils).%FolderItemExists(fullName)
    return:visible=1 1
    return 0
]]></Implementation>
</Method>

<Method name="ResolveText">
<Description><![CDATA[
Resolve a localized text string at run time.
A localized string can take the following forms:<br>
"String" -- not localized.<br>
"$$$String" -- equivalent to $$$Text("String","DeepSeeUser")<br>
"$$$String/Domain" -- equivalent to $$$Text("String","Domain")<br>
Equivalent to ##class(%DeepSee.UserPortal.Utils).%ResolveText(), but in SQL context<br>
Usage: Select MDX2JSON.Dashboard_ResolveText(title) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlName>ResolveText</SqlName>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[    return ##class(%DeepSee.UserPortal.Utils).%ResolveText(Text)
]]></Implementation>
</Method>

<Method name="OpenDashboardByName">
<Description><![CDATA[
Opens DeepSee dashboard by it's name. Returns status of aatempt to locate and open dashboard.
<b>DashName</b> - fullName property of %DeepSee.Dashboard.Definition class.<br>
<b>Dashboard</b> - OREF to opened dashboard would be passed here upon successfull execution.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DashName:%Integer,*Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 kill Dashboard
	 &sql(
        SELECT TOP 1 ID into :tDashId
        FROM %DeepSee_Dashboard.Definition
        WHERE fullName=:DashName
     )
     return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)
     
	 set Dashboard = ##class(%DeepSee.Dashboard.Definition).%OpenId(tDashId,,.st)
	 return st
]]></Implementation>
</Method>

<Method name="WidgetsToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Definition widgets into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,*Widgetlist:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim widget As %DeepSee.Dashboard.Widget
    set Widgetlist = ##class(%ZEN.proxyObject).%New()
    set Widgetlist.children = ##class(%ListOfObjects).%New()
    set Widgetlist.displayInfo = ..GetDashboardDisplayInfo(Dashboard)
    set Widgetlist.info = ..GetDashboardInfo(Dashboard)
    
    set st = $$$OK
    try {
	    for i=1:1:Dashboard.widgets.Count() {
			do Widgetlist.children.Insert(..WidgetToProxyObject(Dashboard.widgets.GetAt(i)))
        }         
    } catch ex {
        set st = ex.AsStatus()
        do ex.Log() 
    }
    return st
]]></Implementation>
</Method>

<Method name="WidgetToProxyObject">
<Description>
Converts relevant parts of %DeepSee.Dashboard.Widget object into %ZEN.proxyObject.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set obj = ##class(%ZEN.proxyObject).%New()
    
    &sql(SELECT cubeName into :cube FROM %DeepSee_Dashboard.Pivot WHERE fullName=:Widget.dataSource)
	set:(SQLCODE'=0) cube=""
	
	if (Widget.dataSource'="") {
		set st = ..GetMdx(Widget.dataSource, .mdx, .basemdx)
	} else {
		// Linked widgets processing
		set mdx = ""
		set basemdx = ""
		set obj.Link = Widget.dataLink
	}
	
	set obj.mdx = mdx
	set obj.name = Widget.name
	set obj.basemdx = basemdx
	set obj.type =Widget.subtype
	set obj.title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(Widget.title) /// $$$ support
	set obj.key =  Widget.key 
	set obj.dataSource = Widget.dataSource
	set obj.drillDownDataSource = Widget.drillDownDataSource
	set obj.cube = cube
	set obj.displayInfo = ..GetWidgetDisplayInfo(Widget)
	set obj.controls = ##class(%ListOfObjects).%New()

	for i=1:1:Widget.controls.Count()
	{
		set control = ..WidgetControlToProxyObject(Widget,i,cube)
		do:$IsObject(control) obj.controls.Insert(control)
	}
	
	if ##class(%Dictionary.CompiledMethod).%ExistsId("MDX2JSON.Dashboard||Process"_Widget.subtype) {
		do $ClassMethod("MDX2JSON.Dashboard", "Process"_Widget.subtype, Widget, obj)
	}
	
	if (Widget.properties.Count()>0) {
		set obj.properties = ##class(%ArrayOfDataTypes).%New()
		do {
			set property = Widget.properties.GetNext(.key)		
			do:(key'="") obj.properties.SetAt(property,key)
		} while key'=""
	}
	
	return obj
]]></Implementation>
</Method>

<Method name="ProcesscomboChart">
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget,Obj:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[
	set Obj.seriesTypes = ##class(%ListOfDataTypes).%New()
	for i=1:1:Widget.dataSeries.Count()
	{
		do Obj.seriesTypes.Insert(Widget.dataSeries.GetAt(i).type)
	}
	
	set Obj.overrides = ##class(%ListOfObjects).%New()
	do {
		set overridestr = Widget.overrides.GetNext(.key)
		do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(overridestr,,.override,1)
		do:$IsObject(override) Obj.overrides.Insert(override)
	} while key'=""
]]></Implementation>
</Method>

<Method name="ProcesstextMeter">
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Obj:%ZEN.proxyObject</FormalSpec>
<Implementation><![CDATA[
	set Obj.dataProperties = ##class(%ListOfDataTypes).%New()
	for i=1:1:Widget.dataProperties.Count()
	{
		set dataProperty = ##class(%ZEN.proxyObject).%New()
		do Widget.dataProperties.GetAt(i).%CopyTo(dataProperty)
		do Obj.dataProperties.Insert(dataProperty)
	}
]]></Implementation>
</Method>

<Method name="WidgetControlToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Number:%Integer,Cube:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(%ZEN.proxyObject).%New()
	set st = Widget.controls.GetAt(Number).%CopyTo(obj) // copy widget control properties to proxyObj
	
	set obj.label = ##class(%DeepSee.UserPortal.Utils).%ResolveText(obj.label)
	set obj.source = Widget.name
	
	set:(obj.target="") obj.target = Widget.name 

	if ($e(obj.value)="@") {
		set name = $e(obj.value,2,*)
		set value = ##class(%DeepSee.UserPortal.Utils).%GetUserSetting(name,.st)
		if $e(value,1,2)="&[" {
			set obj.value = value
		} else {
			set obj.value = "&[" _ value _ "]"
		}
	}
	
	set:((obj.action="applyFilter") || (obj.action="setFilter")) obj.values = ..GetMembersForFilter(Cube,obj.targetProperty)	
	return obj
]]></Implementation>
</Method>

<Method name="GetMdx">
<Description><![CDATA[
Returns MDX string used to create pivot.<br>
<b>pPivotName</b> - fullname of pivot. Eg: "KPIs & Plugins/HoleFoods.pivot". Case insensitive.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String,*MDX,*BaseMDX</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tPivot As %DeepSee.Dashboard.Pivot
	#dim tPivotTable As %DeepSee.Component.pivotTable
	set MDX = ""
	set BaseMDX = ""
    
    set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.pStatus)
    return:'$IsObject(tPivot) $$$OK
    return:$$$ISERR(pStatus) pStatus

    set tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
    set pStatus = tPivot.%CopyToComponent(tPivotTable)
    return:$$$ISERR(pStatus) pStatus
    
    set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.BaseMDX) // returns tQueryText - mdx without filters
	return:$$$ISERR(pStatus) pStatus

	set pStatus = tPivotTable.%GetFilterInfo(.tFilterInfo,.tAdvancedFilters)
	//return:$$$ISERR(pStatus) pStatus

	if (($d(tFilterInfo)=0) &&($d(tAdvancedFilters)=0)) {
		set MDX = BaseMDX // no filters, so we're good
	} else {
		set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.MDX) // returns tQueryText - mdx with filters
		return:$$$ISERR(pStatus) pStatus		
	} 
        
    return pStatus
]]></Implementation>
</Method>

<Method name="GetMembersForFilter">
<Description><![CDATA[
Return list of possible filter member values for a given dashboard data source and filter.
Returns list of %ZEN.proxyObject:<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DataSource:%String,Filter:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set st = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(DataSource,Filter,.tMembers,.tDefaultFilterValue,,.tRelatedFilters,0,,.tValueList)
	set members = ##class(%ListOfObjects).%New()
	
	set key = $order(tMembers("")) 
	while (key '= "") {
		set member = ##class(%ZEN.proxyObject).%New()
		set member.name = $lg(tMembers(key),1)
		set member.path = $lg(tMembers(key),2)
		set member.info = $lg(tMembers(key),3)
		set key = $order(tMembers(key))
		do members.Insert(member)
	}
	return members
]]></Implementation>
</Method>

<Method name="GetDashboardDisplayInfo">
<Description>
Converts %DeepSee.Dashboard.Definition display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set DisplayInfo = ##class(%ZEN.proxyObject).%New()
    set DisplayInfo.snapToGrid = Dashboard.snapTo // Dashboard is in "snap to grid" mode.
    set DisplayInfo.gridMode = Dashboard.snapGrid // Dashboard uses the new snapGrid layout mode.
    set DisplayInfo.gridRows = Dashboard.gridRows
    set DisplayInfo.gridCols = Dashboard.gridCols
    return DisplayInfo
]]></Implementation>
</Method>

<Method name="GetWidgetDisplayInfo">
<Description>
Converts %DeepSee.Dashboard.Widget display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set DisplayInfo = ##class(%ZEN.proxyObject).%New()

	set DisplayInfo.top = Widget.top
	set DisplayInfo.left = Widget.left
	set DisplayInfo.width = Widget.width
	set DisplayInfo.height = Widget.height
	set DisplayInfo.topCol = Widget.homeColL
	set DisplayInfo.leftRow = Widget.homeRowL
	set DisplayInfo.colWidth = Widget.colSpanL
    set DisplayInfo.rowHeight = Widget.rowSpanL
    
    return DisplayInfo
]]></Implementation>
</Method>

<Method name="GetDashboardInfo">
<Description>
Converts %DeepSee.Dashboard.Definition display information into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set Info = ##class(%ZEN.proxyObject).%New()
    set Info.title = Dashboard.title

    return Info
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>
