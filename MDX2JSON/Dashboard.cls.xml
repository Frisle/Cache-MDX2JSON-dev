<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Dashboard">
<Description>
Class with methods related to DeepSee Dashboard and Widget processing.</Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeCreated>63568,54242.448605</TimeCreated>

<Parameter name="folderName">
<Description>
Folder, from which we get Dashboards.</Description>
<Type>%String</Type>
<Default>Mobile</Default>
</Parameter>

<Method name="GetDashboardListSQL">
<Description>
Get SQL for folder, from which we get Dashboards. </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	return "SELECT MDX2JSON.Dashboard_ResolveText(title) As title, fullName As path FROM %DeepSee_Dashboard.Definition WHERE folderName %STARTSWITH '" _..#folderName _"'"
]]></Implementation>
</Method>

<Method name="ResolveText">
<Description><![CDATA[
Resolve a localized text string at run time.
A localized string can take the following forms:<br>
"String" -- not localized.<br>
"$$$String" -- equivalent to $$$Text("String","DeepSeeUser")<br>
"$$$String/Domain" -- equivalent to $$$Text("String","Domain")<br>
Equivalent to ##class(%DeepSee.UserPortal.Utils).%ResolveText(), but in SQL context<br>
Usage: Select MDX2JSON.Dashboard_ResolveText(title) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[    return ##class(%DeepSee.UserPortal.Utils).%ResolveText(Text)
]]></Implementation>
</Method>

<Method name="OpenDashboardByName">
<Description><![CDATA[
Opens DeepSee dashboard by it's name. Returns status of aatempt to locate and open dashboard.
<b>DashName</b> - fullName property of %DeepSee.Dashboard.Definition class.<br>
<b>Dashboard</b> - OREF to opened dashboard would be passed here upon successfull execution.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DashName:%Integer,*Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 kill Dashboard
	 &sql(
        SELECT TOP 1 ID into :tDashId
        FROM %DeepSee_Dashboard.Definition
        WHERE fullName=:DashName
     )
     return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)
     
	 set Dashboard = ##class(%DeepSee.Dashboard.Definition).%OpenId(tDashId,,.st)
	 return st
]]></Implementation>
</Method>

<Method name="WidgetsToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Definition widgets into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,*Widgetlist:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim widget As %DeepSee.Dashboard.Widget
    set Widgetlist = ##class(%ZEN.proxyObject).%New()
    set Widgetlist.children = ##class(%ListOfObjects).%New()
    
    set st = $$$OK
    try {
	    for i=1:1:Dashboard.widgets.Count() {
			do Widgetlist.children.Insert(..WidgetToProxyObject(Dashboard.widgets.GetAt(i)))
        }         
    } catch ex {
        set st = ex.AsStatus()
        do ex.Log() 
    }
    return st
]]></Implementation>
</Method>

<Method name="WidgetToProxyObject">
<Description>
Converts relevant parts of %DeepSee.Dashboard.Widget object into %ZEN.proxyObject.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set obj = ##class(%ZEN.proxyObject).%New()
            
    &sql(SELECT cubeName into :cube FROM %DeepSee_Dashboard.Pivot WHERE fullName=:Widget.dataSource)
	set:(SQLCODE'=0) cube=""
	
	set st = ..GetMdx(Widget.dataSource, .mdx, .basemdx)
	//return:($$$ISERR(st)) st //all checks passed beforehand
	
	set obj.mdx = mdx
	set obj.basemdx = basemdx
	set obj.type =Widget.subtype
	set obj.title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(Widget.title) /// $$$ support
	set obj.key =  Widget.key 
	set obj.dataSource = Widget.dataSource
	set obj.drillDownDataSource = Widget.drillDownDataSource
	set obj.cube = cube
	set obj.controls = ##class(%ListOfObjects).%New()

	for i=1:1:Widget.controls.Count()
	{
		do obj.controls.Insert(..WidgetControlToProxyObject(Widget.controls.GetAt(i)))
	}
	return obj
]]></Implementation>
</Method>

<Method name="WidgetControlToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Control:%DeepSee.Dashboard.Control</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(%ZEN.proxyObject).%New()
	set obj.action = Control.action 
	set obj.label = Control.label  
	set obj.location = Control.location  
	set obj.readOnly = Control.readOnly  
	set obj.name = Control.name  
	set obj.size = Control.size  
	set obj.target = Control.target  
	set obj.targetProperty = Control.targetProperty   
	set obj.targetPropertyDisplay = Control.targetPropertyDisplay   
	set obj.text = Control.text 
	set obj.timeout = Control.timeout 
	set obj.title = Control.title 
	set obj.type = Control.type 
	set obj.typeDisplay = Control.typeDisplay 
	if ($e(Control.value)="@") {
		set name = $e(Control.value,2,*)
		set value = ##class(%DeepSee.UserPortal.Utils).%GetUserSetting(name,.st)
		if $e(value,1,2)="&[" {
			set obj.value = value
		} else {
			set obj.value = "&[" _ value _ "]"
		}
	} else {
		set obj.value = Control.value 
	}  
	set obj.valueList = Control.valueList
	return obj
]]></Implementation>
</Method>

<Method name="GetMdx">
<Description><![CDATA[
Returns MDX string used to create pivot.<br>
<b>pPivotName</b> - fullname of pivot. Eg: "KPIs & Plugins/HoleFoods.pivot". Case insensitive.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String,*MDX,*BaseNDX</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tPivot As %DeepSee.Dashboard.Pivot
	#dim tPivotTable As %DeepSee.Component.pivotTable
    set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.pStatus)

    return:$$$ISERR(pStatus)

    set tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
    set pStatus = tPivot.%CopyToComponent(tPivotTable)
    return:$$$ISERR(pStatus)
    
    set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.BaseNDX) // returns tQueryText - mdx without filters
	return:$$$ISERR(pStatus)
	
	set pStatus = tPivotTable.%GetFilterInfo(.tFilterInfo,.tAdvancedFilters)
	return:$$$ISERR(pStatus)
	
	if (($d(tFilterInfo)=0) &&($d(tAdvancedFilters)=0)) {
		set MDX = BaseNDX // no filters, so we're good
	} else {
		set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.MDX) // returns tQueryText - mdx with filters
		return:$$$ISERR(pStatus)		
	} 
        
    return pStatus
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>
