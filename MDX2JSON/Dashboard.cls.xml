<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Dashboard">
<Description>
Class with methods related to DeepSee Dashboard and Widget processing.</Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeCreated>63568,54242.448605</TimeCreated>

<Parameter name="folderName">
<Description>
Folder, from which we get Dashboards.</Description>
<Type>%String</Type>
<Default>Mobile</Default>
</Parameter>

<Method name="GetDashboardListSQL">
<Description>
Get SQL for folder, from which we get Dashboards. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>folderName:%String=..#folderName</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set basesql = "SELECT MDX2JSON.Dashboard_ResolveText(title) AS title, fullName AS path, MDX2JSON.Dashboard_GetDashCover(bookCover) AS Cover FROM %DeepSee_Dashboard.Definition "
	set basefilter = "WHERE (NOT (foldername %STARTSWITH '$TRASH' or foldername %STARTSWITH 'HIDDEN')) "
	return:folderName="" basesql _ basefilter
	set filter = "AND folderName %STARTSWITH '" _ folderName _"'"
	return basesql _ basefilter _ filter
]]></Implementation>
</Method>

<Method name="GetDashCover">
<Description><![CDATA[
Extracts dashboard cover from %DeepSee.Dashboard.Definition class bookCover property.<br>
Usage: Select MDX2JSON.Dashboard_GetDashCover(bookCover) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>bookCover:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(bookCover,,.obj,1)
	return:$isobject(obj) obj.background.src
    return ""
]]></Implementation>
</Method>

<Method name="ResolveText">
<Description><![CDATA[
Resolve a localized text string at run time.
A localized string can take the following forms:<br>
"String" -- not localized.<br>
"$$$String" -- equivalent to $$$Text("String","DeepSeeUser")<br>
"$$$String/Domain" -- equivalent to $$$Text("String","Domain")<br>
Equivalent to ##class(%DeepSee.UserPortal.Utils).%ResolveText(), but in SQL context<br>
Usage: Select MDX2JSON.Dashboard_ResolveText(title) FROM %DeepSee_Dashboard.Definition]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Text:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[    return ##class(%DeepSee.UserPortal.Utils).%ResolveText(Text)
]]></Implementation>
</Method>

<Method name="OpenDashboardByName">
<Description><![CDATA[
Opens DeepSee dashboard by it's name. Returns status of aatempt to locate and open dashboard.
<b>DashName</b> - fullName property of %DeepSee.Dashboard.Definition class.<br>
<b>Dashboard</b> - OREF to opened dashboard would be passed here upon successfull execution.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DashName:%Integer,*Dashboard:%DeepSee.Dashboard.Definition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	 kill Dashboard
	 &sql(
        SELECT TOP 1 ID into :tDashId
        FROM %DeepSee_Dashboard.Definition
        WHERE fullName=:DashName
     )
     return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)
     
	 set Dashboard = ##class(%DeepSee.Dashboard.Definition).%OpenId(tDashId,,.st)
	 return st
]]></Implementation>
</Method>

<Method name="WidgetsToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Definition widgets into %ZEN.proxyObject.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Dashboard:%DeepSee.Dashboard.Definition,*Widgetlist:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim widget As %DeepSee.Dashboard.Widget
    set Widgetlist = ##class(%ZEN.proxyObject).%New()
    set Widgetlist.children = ##class(%ListOfObjects).%New()
    
    set st = $$$OK
    try {
	    for i=1:1:Dashboard.widgets.Count() {
			do Widgetlist.children.Insert(..WidgetToProxyObject(Dashboard.widgets.GetAt(i)))
        }         
    } catch ex {
        set st = ex.AsStatus()
        do ex.Log() 
    }
    return st
]]></Implementation>
</Method>

<Method name="WidgetToProxyObject">
<Description>
Converts relevant parts of %DeepSee.Dashboard.Widget object into %ZEN.proxyObject.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
    set obj = ##class(%ZEN.proxyObject).%New()
    
    &sql(SELECT cubeName into :cube FROM %DeepSee_Dashboard.Pivot WHERE fullName=:Widget.dataSource)
	set:(SQLCODE'=0) cube=""
	
	set st = ..GetMdx(Widget.dataSource, .mdx, .basemdx)
	//return:($$$ISERR(st)) st //all checks passed beforehand
	
	set obj.mdx = mdx
	set obj.name = Widget.name
	set obj.basemdx = basemdx
	set obj.type =Widget.subtype
	set obj.title = ##class(%DeepSee.UserPortal.Utils).%ResolveText(Widget.title) /// $$$ support
	set obj.key =  Widget.key 
	set obj.dataSource = Widget.dataSource
	set obj.drillDownDataSource = Widget.drillDownDataSource
	set obj.cube = cube
	set obj.controls = ##class(%ListOfObjects).%New()

	for i=1:1:Widget.controls.Count()
	{
		set control = ..WidgetControlToProxyObject(Widget,i,cube)
		do:$IsObject(control) obj.controls.Insert(control)
	}
	
	if Widget.subtype = "comboChart" {
		set obj.seriesTypes = ##class(%ListOfDataTypes).%New()
		for i=1:1:Widget.dataSeries.Count()
		{
			do obj.seriesTypes.Insert(Widget.dataSeries.GetAt(i).type)
		}
		
		set obj.overrides = ##class(%ListOfObjects).%New()
		do {
			set overridestr = Widget.overrides.GetNext(.key)
			do ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(overridestr,,.override,1)
			do:$IsObject(override) obj.overrides.Insert(override)
		} while key'=""	
	}
	
	if (Widget.properties.Count()>0) {
		set obj.properties = ##class(%ArrayOfDataTypes).%New()
		do {
			set property = Widget.properties.GetNext(.key)		
			do:(key'="") obj.properties.SetAt(property,key)
		} while key'=""
	}
	
	return obj
]]></Implementation>
</Method>

<Method name="WidgetControlToProxyObject">
<Description>
Converts %DeepSee.Dashboard.Control object into %ZEN.proxyObject, handles run-time DeepSee variables.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>Widget:%DeepSee.Dashboard.Widget,Number:%Integer,Cube:%String</FormalSpec>
<ReturnType>%ZEN.proxyObject</ReturnType>
<Implementation><![CDATA[
	#dim control As %DeepSee.Dashboard.Control
	set control = Widget.controls.GetAt(Number)
	set obj = ##class(%ZEN.proxyObject).%New()
	set obj.action = control.action 
	set obj.label = ##class(%DeepSee.UserPortal.Utils).%ResolveText(control.label)
	set obj.location = control.location  
	set obj.readOnly = control.readOnly  
	set obj.name = control.name  
	set obj.size = control.size  
	set obj.source = Widget.name
	set obj.target = control.target
	set:(obj.target="") obj.target = Widget.name 
	set obj.targetProperty = control.targetProperty   
	set obj.targetPropertyDisplay = control.targetPropertyDisplay   
	set obj.text = control.text 
	set obj.timeout = control.timeout 
	set obj.title = control.title 
	set obj.type = control.type 
	set obj.typeDisplay = control.typeDisplay 
	if ($e(control.value)="@") {
		set name = $e(control.value,2,*)
		set value = ##class(%DeepSee.UserPortal.Utils).%GetUserSetting(name,.st)
		if $e(value,1,2)="&[" {
			set obj.value = value
		} else {
			set obj.value = "&[" _ value _ "]"
		}
	} else {
		set obj.value = control.value 
	}  
	set obj.valueList = control.valueList
	set:((control.action="applyFilter") || (control.action="setFilter")) obj.values = ..GetMembersForFilter(Cube,obj.targetProperty)	
	return obj
]]></Implementation>
</Method>

<Method name="GetMdx">
<Description><![CDATA[
Returns MDX string used to create pivot.<br>
<b>pPivotName</b> - fullname of pivot. Eg: "KPIs & Plugins/HoleFoods.pivot". Case insensitive.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String,*MDX,*BaseMDX</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tPivot As %DeepSee.Dashboard.Pivot
	#dim tPivotTable As %DeepSee.Component.pivotTable
    set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.pStatus)

    return:$$$ISERR(pStatus) pStatus

    set tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
    set pStatus = tPivot.%CopyToComponent(tPivotTable)
    return:$$$ISERR(pStatus) pStatus
    
    set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.BaseMDX) // returns tQueryText - mdx without filters
	return:$$$ISERR(pStatus) pStatus

	set pStatus = tPivotTable.%GetFilterInfo(.tFilterInfo,.tAdvancedFilters)
	//return:$$$ISERR(pStatus) pStatus

	if (($d(tFilterInfo)=0) &&($d(tAdvancedFilters)=0)) {
		set MDX = BaseMDX // no filters, so we're good
	} else {
		set rs = tPivotTable.%CreateResultSet(.pStatus,.tParms,.tFilterInfo,.tAdvancedFilters,.MDX) // returns tQueryText - mdx with filters
		return:$$$ISERR(pStatus) pStatus		
	} 
        
    return pStatus
]]></Implementation>
</Method>

<Method name="GetMembersForFilter">
<Description><![CDATA[
Return list of possible filter member values for a given dashboard data source and filter.
Returns list of %ZEN.proxyObject:<br/>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>DataSource:%String,Filter:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	set st = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(DataSource,Filter,.tMembers,.tDefaultFilterValue,,.tRelatedFilters,0,,.tValueList)
	set members = ##class(%ListOfObjects).%New()
	
	set key = $order(tMembers("")) 
	while (key '= "") {
		set member = ##class(%ZEN.proxyObject).%New()
		set member.name = $lg(tMembers(key),1)
		set member.path = $lg(tMembers(key),2)
		set member.info = $lg(tMembers(key),3)
		set key = $order(tMembers(key))
		do members.Insert(member)
	}
	return members
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>
</Export>
