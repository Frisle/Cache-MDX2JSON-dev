<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Installer">
<TimeCreated>63481,77165.410085</TimeCreated>

<XData name="Install">
<Description>
See generated code in zsetup+1^MDX2JSON.Installer.1
todo add optional parameter WEBAPP to Alter web app name if it needs to have another then namespace name</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>
<IfNotDef Var="Namespace">
<Var Name="Namespace" Value="MDX2JSON"/>
<Log Text="Set namespace to ${Namespace}" Level="0"/>
</IfNotDef>
<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>
<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Ensemble="" Data="${Namespace}">
<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>
</Namespace>
 <Log Text="End Creating namespace ${Namespace}" Level="0"/>
</If>

<Namespace Name="${Namespace}" Create="no">
<IfDef Var="SourceDir">
<Log Text="SourceDir defined - offline install from ${SourceDir}" Level="0"/>
<Import File="${SourceDir}"/>
</IfDef>
<IfNotDef Var="SourceDir">
<Log Text="SourceDir undefined - online install from GitHub" Level="0"/>
<RunInstall Class="MDX2JSON.Installer" Method="DownloadFromGitHub"/>
</IfNotDef>
<If Condition='(##class(Security.Applications).Exists("/"_"${Namespace}")=0)'>
	<Log Text="Creating web application /${Namespace}" Level="0"/>
	<!-- This method creates conflits with web-server. Kept for reference purposes. See ##class(%EnsembleMgr).createPortalApp()
	<CSPApplication Url="/${Namespace}" Directory="" AuthenticationMethods="64" IsNamespaceDefault="false" />-->
	<RunInstall Class="MDX2JSON.Installer" Method="CreateWebApp"/>
</If>
</Namespace>

<If Condition='(##class(Config.Namespaces).Exists("%All")=0)'>
<Log Text="Creating namespace %All" Level="0"/>
<RunInstall Class="MDX2JSON.Installer" Method="CreateAllNamespace"/>
</If>

<Log Text="Mapping MDX2JSON package to %All namespace" Level="0"/>
<Namespace Name="%All" Create="no">
<ClassMapping From="${Namespace}" Package="MDX2JSON"/> 
</Namespace>

<Log Text="Mapping MDX2JSON package to Samples namespace" Level="0"/>
<Namespace Name="Samples" Create="no">
<ClassMapping From="${Namespace}" Package="MDX2JSON"/> 
</Namespace>

<IfDef Var="User" >
<IfDef Var="Password">
<User Username="${User}" Namespace="${Namespace}" PasswordVar="Password" Roles="%DB_${Namespace}" Enabled="true" Comment="MDX2JSON user" Fullname="MDX2JSON user" >
</User>
<RunInstall Class="MDX2JSON.Installer" Method="GrantSelectToUserInstaller"/>
<Log Text="User modifyed/created and granted SELECT access to all tables in ${Namespace}" Level="0"/>
<RunInstall Class="MDX2JSON.Installer" Method="GrantExecuteToUserInstaller"/>
<Log Text="User modifyed/created and granted EXECUTE access to all procedures in ${Namespace}" Level="0"/>
</IfDef> 
<IfNotDef Var="Password">
<Log Text="You specified username but not a password" Level="0"/>
</IfNotDef> 
</IfDef> 

</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
 This is a method generator whose code is generated by XGL.
Set pVars("Namespace")="TEMP3"
Set pVars("SourceDir")="C:\temp\MDX2JSON\MDX2JSON"
do ##class(MDX2JSON.Installer).setup(.pVars)</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer=0,pInstaller:%Installer.Installer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Install")
]]></Implementation>
</Method>

<Method name="CreateWebApp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Do ##class(Security.System).GetInstallationSecuritySetting(.security)
    If (security="None") {
    	Set cspProperties("AutheEnabled") = 64 // Unauthenticated
    } Else {
	    Set cspProperties("AutheEnabled") = 32 // Password
    }
    Set cspProperties("NameSpace") = Namespace
    Set cspProperties("IsNameSpaceDefault") = 1
    Set cspProperties("DispatchClass")="MDX2JSON.REST"
    Set tSC = ##class(Security.Applications).Create("/"_Namespace, .cspProperties)
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="CreateAllNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do tInstaller.PushNS("%SYS")
	Do tInstaller.CreateNamespace("%All","CACHETEMP","CACHETEMP")
	Set tSC = (##class(Config.Namespaces).Exists("%All")=1)
	Do tInstaller.PopNS()	
	Quit:tSC $$$OK
	Quit $$$ERROR($$$GeneralError,"Error creating %All Namespace")
]]></Implementation>
</Method>

<Method name="DeleteNamespace">
<ClassMethod>1</ClassMethod>
<FormalSpec>Namespace=$Namespace</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Based on %CSP.UI.Portal.Dialog.NamespaceDelete:SaveData
    Try {
	    Set st = ##class(MDX2JSON.AbstractREST).CheckNamespace(.Namespace)
    	Return:$$$ISERR(st) st
	    
	    Set ns=$Namespace
	    zn:ns'="%SYS" "%SYS"
		Set st = ##class(Config.Namespaces).Delete(Namespace)
		Return:$$$ISERR(st) st
		
		#; clear application
		/*&sql(DECLARE C1 CURSOR FOR SELECT Name,Path INTO :Name,:Path FROM Security.Applications)
		&sql(OPEN C1)
		&sql(FETCH C1)

		While (SQLCODE = 0) {
		    #; delete csp application from security
			Set st = ##Class(Security.Applications).Delete(Name)
			#; delete csp pages and physical path
			If (Path '= "") {
				#; delete csp pages in this directory
				Set RS = ##class(%ResultSet).%New("%File:FileSet")
				Do RS.Execute(cspPath,"*.csp")
				While RS.Next() {
					Do ##class(%File).Delete(RS.Get("Name"))
				}
				#; delete this directory - If there are no files left and no subdirectory, then it's deleted.
				Do ##class(%File).RemoveDirectory(Path)
			}
			    
		    &sql(FETCH C1)
		}
    
 		&sql(CLOSE C1)*/
		
		#; remove Ensemble namespace
	 	If ((##class(%Library.EnsembleMgr).IsEnsembleInstalled() || ##class(%Library.EnsembleMgr).IsHealthShareInstalled())) {
	 		Set tSC = ##class(%Library.EnsembleMgr).DisableNamespace(Namespace)
	 		Return:$$$ISERR(st) st
	 	}
	 	
		#; remove the session data so System link (from locator bar) will not have the old namespace built into URL.
		Kill %session.Data("$NAMESPACE")
	} catch Error {
		Set st = er.AsStatus()
	}
	zn:((ns'="%SYS") && (ns'=Namespace)) ns

    Quit st
]]></Implementation>
</Method>

<Method name="DownloadFromGitHub">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Set tSC = ..Update(Namespace, "intersystems-ru", "Cache-MDX2JSON", "master")
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
]]></Implementation>
</Method>

<Method name="Update">
<Description><![CDATA[
Downloads and compiles GitHub repository.<br>
 <b>Owner</b> - The name of the repository owner.<br>
 <b>Repository</b> - The name of the repository.<br>
 <b>Branch</b> - The name of the commit/branch/tag. If skipped the repository’s default branch (usually master) would be used.<br>
 <b>Username</b> - GitHub user, who has access to repository. Optional for public repositories.<br>
 <b>Password</b> - GitHub password, corresponding to Username. Optional for public repositories.<br>
 Note, that with Username, you can make up to 5,000 requests per hour. 
 For unauthenticated requests, the rate limit allows to make up to 60 requests per hour. 
 Unauthenticated requests are associated with an IP address.<br>
 <b>Namespace</b> - Namespace, where to download and compile repository.<br>
 
 For example in the repository: https://github.com/intersystems-ru/Cache-MDX2JSON<br>
 Owner - intersystems-ru, Repository - Cache-MDX2JSON.<br> ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Namespace=$Namespace,Owner:%String="intersystems-ru",Repository:%String="Cache-MDX2JSON",Branch:%String,Username:%String,Password:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set namespace = $Namespace
 	Set SSLConfig = "GitHub"
 	
 	Zn "%SYS"
 	Do:'##class(Security.SSLConfigs).Exists(SSLConfig) ##class(Security.SSLConfigs).Create(SSLConfig)

 	Set req=##class(%Net.HttpRequest).%New()
 	Set req.Https=1
	Set req.SSLConfiguration=SSLConfig
	Set req.Server="api.github.com"
	Set req.Location = "repos/" _ Owner _ "/" _ Repository _ "/contents" 	// as described in https://developer.github.com/v3/repos/	
	Do:$d(Branch) req.SetParam("ref",Branch) 								// if omitted the repository’s default branch (usually master) would be used
	Do req.SetHeader("Accept","application/vnd.github.v3+json") 			// we want to receive API v3
	
	If ($d(Username) && $d(Password)) {										// supply Username and Passwor, if both are provided. GitHub accept Basic Auth
		Set req.Username = Username											// https://developer.github.com/v3/auth/
	 	Set req.Password = Password
	} 	

 	Set links = ##class(%ListOfDataTypes).%New()
 	Set st = ..ProcessDirectory("",req,.links)
 	Return:$$$ISERR(st) st
 	 	
 	Zn Namespace
	Set st = ..DownloadFiles(links,req,.list)
	Set st2 = $system.OBJ.CompileList(.list)
	Zn namespace
	
 	Return $$$ADDSC(st, st2)
]]></Implementation>
</Method>

<Method name="ProcessDirectory">
<Description><![CDATA[
Process one directory of GitHub repository. Recursive.<br>
<b>Path</b> -Internal repository path. Root is empty string<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>Links</b> - List of links to raw files (which satisfy <b>IsCacheFile</b> conditions) from repository.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Path:%String="",Request:%Net.HttpRequest,&Links:%ListOfDataTypes]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set location = Request.Location
	Set Request.Location = Request.Location _ Path
	
	Set st = Request.Get()
	Return:$$$ISERR(st) st
	Return:(Request.HttpResponse.StatusCode = 404) $$$ERROR($$$GeneralError,"Repository doesn't exist OR you don't have access")
	Return:((Request.HttpResponse.StatusCode = 403) && (Request.HttpResponse.GetHeader("X-RATELIMIT-REMAINING")=0)) $$$ERROR($$$GeneralError,"API rate limit exceeded. Try logging in.")
 	Return:(Request.HttpResponse.StatusCode '= 200) $$$ERROR($$$GeneralError,"Received " _ Request.HttpResponse.StatusCode _ " status, expected 200")
 	
 	#dim objects As List of %ZEN.proxyObject
 	#dim obj As %ZEN.proxyObject
	Set st = ##class(%ZEN.Auxiliary.jsonProvider).%ConvertJSONToObject(Request.HttpResponse.Data,,.objects,1)
	Return:$$$ISERR(st) st
	
	For i = 1:1:objects.Count() {		
		Set obj = objects.GetAt(i)
		If (obj.type = "dir") {
			Set st = ..ProcessDirectory("/"_obj.name,Request,.Links)
			Return:$$$ISERR(st) st		
		} ElseIf (obj.type = "file") {
			Do:..IsCacheFile(obj) Links.Insert(obj."download_url")
		} Else {
			// obj.type = "symlink" or obj.type = "submodule"
		} 
	}
	Set Request.Location = location // to keep track of where in the repository tree we are
	Return $$$OK
]]></Implementation>
</Method>

<Method name="IsCacheFile">
<Description>
Check that incoming file is the one you need.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>File:%ZEN.proxyObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set extensions = ",xml,cls,csp,csr,mac,int,bas,inc,gbl,prj,obj,pkg,gof,"
	Return:($L(File.name,".")=1) 0 //no extension
	Set File.Extension = $P(File.name,".",$L(File.name,"."))
	Return $F(extensions,","_$ZCVT(File.Extension,"l")_",")
]]></Implementation>
</Method>

<Method name="DownloadFiles">
<Description><![CDATA[
Download list of files on https://raw.githubusercontent.com/ server.<br>
<b>Links</b> - List of links to raw files.<br>
<b>Request</b> - Authenticated/Set %Net.HttpRequest object.<br>
<b>loadedlist</b> - Returns an array of the items loaded. ]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Links:%ListOfDataTypes,Request:%Net.HttpRequest,*Items</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill Items
	Set Request.Server = "raw.githubusercontent.com"
	Set st = $$$OK
	
	For i = 1:1:Links.Count() {
		Set streq = Request.Get($e(Links.GetAt(i),35,*)) // Remove "https://raw.githubusercontent.com/" from URL.	
		Set:$$$ISERR(streq) st=$$$ADDSC(st, streq)
		Set binarystream = Request.HttpResponse.Data
		Do binarystream.Rewind() // just in case

		Set stream=##class(%GlobalCharacterStream).%New() //translating binary stream into character stream
		While 'binarystream.AtEnd { 
			Do stream.Write(binarystream.Read()) 
		}
		Do stream.Rewind()

		Set stload = $system.OBJ.LoadStream(stream,"",.error,.items,,,,"UTF8")
		Set:$$$ISERR(stload) st=$$$ADDSC(st, stload)
		Merge Items = items  // Does not overwrite existing array keys: Items(itemname)=""
	}
	
	Set Request.Server="api.github.com"
	Return st
]]></Implementation>
</Method>

<Method name="RevokePublicPriveleges">
<Description>
Revokes all access of _PUBLIC user to everything in comma-separated list of namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>NamespacesList:%String="*"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set:NamespacesList="*" NamespacesList=..GetNSList()
	set basens=$Namespace
	set st = $$$OK
	for i=1:1:$l(NamespacesList,",") {
		zn $p(NamespacesList,",",i)
		set st1=$SYSTEM.SQL.RevokeObjPriv("SELECT","*","TABLE","_PUBLIC",,,"_SYSTEM")
		set st2=$SYSTEM.SQL.RevokeObjPriv("SELECT","*","VIEW","_PUBLIC",,,"_SYSTEM")
		set st3=$SYSTEM.SQL.RevokeObjPriv("SELECT","*","CUBES","_PUBLIC",,,"_SYSTEM")
		set st4=$SYSTEM.SQL.RevokeObjPriv("SELECT","*","STORED PROCEDURES","_PUBLIC",,,"_SYSTEM")
		set st = $$$ADDSC(st, $$$ADDSC(st1, $$$ADDSC(st2, $$$ADDSC(st3,st4))))
	}
	zn basens
	return st
]]></Implementation>
</Method>

<Method name="GetNSList">
<Description>
Returns comma-separated list of all local availible namespaces</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set st=##class(%CSP.Portal.Utils).%GetNamespaceList(.nsarrary)
	return:$$$ISERR(st) st
	set namespace = $O(nsarrary(""))
	set nslist=""
	while namespace '= "" {
		set enabled = $lg(nsarrary(namespace),1)
		set remote = $lg(nsarrary(namespace),2)
		if ((enabled = 1) && (remote=0)) {
			set nslist=nslist _ namespace _ ","	
		}
		set namespace = $O(nsarrary(namespace))
	}
	return $e(nslist,1,*-1)
]]></Implementation>
</Method>

<Method name="GrantSelectToUserInstaller">
<Description>
Grant select access to User to all tables in comma-separated list of namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set user = tInstaller.Evaluate("${User}")
	set namespace = tInstaller.Evaluate("${Namespace}")
	return ..GrantSelectToUser(user,namespace)
]]></Implementation>
</Method>

<Method name="GrantSelectToUser">
<Description>
Grant select access to User to all tables in comma-separated list of namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>User:%String,NamespacesList:%String="*"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set:NamespacesList="*" NamespacesList=..GetNSList()
	set basens=$Namespace
	set st = $$$OK
	for i=1:1:$l(NamespacesList,",") {
		zn $p(NamespacesList,",",i)
		set st = $$$ADDSC(st,$SYSTEM.SQL.GrantObjPriv("SELECT","*","TABLE",User))	
	}
	zn basens
	return st
]]></Implementation>
</Method>

<Method name="GrantExecuteToUserInstaller">
<Description>
Grant select access to User to all tables in comma-separated list of namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set user = tInstaller.Evaluate("${User}")
	set namespace = tInstaller.Evaluate("${Namespace}")
	return ..GrantSelectToUser(user,namespace)
]]></Implementation>
</Method>

<Method name="GrantExecuteToUser">
<Description>
Grant select access to User to all tables in comma-separated list of namespaces</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>User:%String,NamespacesList:%String="*"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set:NamespacesList="*" NamespacesList=..GetNSList()
	set basens=$Namespace
	set st = $$$OK
	for i=1:1:$l(NamespacesList,",") {
		zn $p(NamespacesList,",",i)
		/*set st1 = $SYSTEM.SQL.GrantObjPriv("EXECUTE","MDX2JSON.ResolveText","STORED PROCEDURES",User)
		set st2 = $SYSTEM.SQL.GrantObjPriv("EXECUTE","MDX2JSON.IsItemVisible","STORED PROCEDURES",User)
		set st3 = $SYSTEM.SQL.GrantObjPriv("EXECUTE","MDX2JSON.GetDashCover","STORED PROCEDURES",User)
		set st = $$$ADDSC(st1,$$$ADDSC(st2,st3))*/
		set sql = "GRANT EXECUTE ON MDX2JSON.ResolveText,MDX2JSON.IsItemVisible,MDX2JSON.GetDashCover to " _ User
		set statement = ##class(%SQL.Statement).%New()
		set st = statement.%Prepare(sql)
		return:$$$ISERR(st) st
		set rset = statement.%Execute()
		w $System.Status.GetErrorText(st)
		return:((rset.%SQLCODE'=0) && (rset.%SQLCODE'=100)) $System.Status.Error(5521, rset.%SQLCODE,rset.%Message) 
	}
	zn basens
	return st
]]></Implementation>
</Method>
</Class>
</Export>
