<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Installer">
<TimeCreated>63481,77165.410085</TimeCreated>

<XData name="Manifest">
<Description>
See generated code in zsetup+1^MDX2JSON.Installer.1
todo add optional parameter WEBAPP to Alter web app name if it needs to have another then namespace name</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>
<If Condition='(##class(Config.Namespaces).Exists("${Namespace}")=0)'>
<Log Text="Creating namespace ${Namespace}" Level="0"/>
<Namespace Name="${Namespace}" Create="yes" Code="${Namespace}" Data="${Namespace}">
<Configuration>
<Database Name="${Namespace}" Dir="${MGRDIR}/${Namespace}" Create="yes" MountRequired="true" Resource="%DB_${Namespace}" PublicPermissions="RW" MountAtStartup="true"/>
</Configuration>
</Namespace>
 <Log Text="End Creating namespace ${Namespace}" Level="0"/>
</If>

<Namespace Name="${Namespace}" Create="no">
<Import File="${SourceDir}"/>
<If Condition='(##class(Security.Applications).Exists("/"_"${Namespace}")=0)'>
	<Log Text="Creating web application /${Namespace}" Level="0"/>
	<!-- This method creates conflits with web-server. Kept for reference purposes. See ##class(%EnsembleMgr).createPortalApp()
	<CSPApplication Url="/${Namespace}" Directory="" AuthenticationMethods="64" IsNamespaceDefault="false" />-->
	<RunInstall Class="MDX2JSON.Installer" Method="CreateWebApp"/>
</If>
</Namespace>

<If Condition='(##class(Config.Namespaces).Exists("%All")=0)'>
<Log Text="Creating namespace %All" Level="0"/>
<Namespace Name="%All" Create="yes" Code="All" Data="All">
<Configuration>
<Database Name="All" Dir="${MGRDIR}/All" Create="yes" MountRequired="true" MountAtStartup="true"/>
</Configuration>
</Namespace>
</If>

<Log Text="Mapping MDX2JSON package to %All namespace" Level="0"/>
<Namespace Name="%All" Create="no">
<ClassMapping From="${Namespace}" Package="MDX2JSON"/> 
</Namespace>

<Log Text="Mapping MDX2JSON package to Samples namespace" Level="0"/>
<Namespace Name="Samples" Create="no">
<ClassMapping From="${Namespace}" Package="MDX2JSON"/> 
</Namespace>
</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
 This is a method generator whose code is generated by XGL.
Set pVars("Namespace")="TEMP3"
Set pVars("SourceDir")="C:\temp\MDX2JSON\MDX2JSON"
do ##class(MDX2JSON.Installer).setup(.pVars)</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer=0,pInstaller:%Installer.Installer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[ 	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Manifest")
]]></Implementation>
</Method>

<Method name="CreateWebApp">
<ClassMethod>1</ClassMethod>
<FormalSpec>pVars,pLogLevel,tInstaller</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set Namespace=tInstaller.Evaluate("${Namespace}")
    Do tInstaller.PushNS("%SYS")
    Set cspProperties("AutheEnabled") = 64 
    Set cspProperties("NameSpace") = Namespace
    Set cspProperties("IsNameSpaceDefault") = 1
    Set cspProperties("DispatchClass")="MDX2JSON.REST"
    Set tSC = ##class(Security.Applications).Create("/"_Namespace, .cspProperties)
    Do tInstaller.PopNS()
    If $$$ISERR(tSC) Throw ##class(%Installer.Exception).CreateFromStatus(tSC)
    quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
