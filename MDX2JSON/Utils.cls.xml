<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2014.1.1 (Build 702U)" ts="2014-12-02 00:11:19">
<Class name="MDX2JSON.Utils">
<Description><![CDATA[
Utility class, wrappers for processing of MDX queries in <b>MDX2JSON.ResultSet</b>.
Outputs JSON, JSONP and XML/A.<br>
Also has functionality for getting information about cubes, dashboards and widgets.]]></Description>
<IncludeCode>MDX2JSON.MDX2JSON</IncludeCode>
<TimeChanged>63523,591.0226</TimeChanged>
<TimeCreated>63165,65653.547419</TimeCreated>

<Method name="GetResultSet">
<Description><![CDATA[
Transforms MDX query into executed <b>MDX2JSON.ResultSet</b>.<br>
<b>pMDX</b> - String containing MDX query.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String,*pStatus</FormalSpec>
<ReturnType>MDX2JSON.ResultSet</ReturnType>
<Implementation><![CDATA[
    set Params = ""
    set pStatus = $$$OK
    set RS = ##class(MDX2JSON.ResultSet).%ExecuteDirect(pMDX,.Params,.pStatus)
    return RS
]]></Implementation>
</Method>

<Method name="WriteJSONfromMDX">
<Description><![CDATA[
Automatic processing of MDX query and outputting resulting JSON.<br>
<b>pMDX</b> - String containing MDX query.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #dim RS As MDX2JSON.ResultSet
    set RS = ..GetResultSet(pMDX,.st)      
    return:$$$ISERR(st) st
        
    set obj = RS.ToProxyObject(.st)
    return:$$$ISERR(st) st
    write $e(obj.%ToJSON(),1,*-1) // status
    
    return $$$OK
]]></Implementation>
</Method>

<Method name="WriteJSONPfromMDX">
<Description><![CDATA[
Automatic processing of MDX query and outputting resulting JSONP.<br>
<b>pMDX</b> - String containing MDX query.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set RS = ..GetResultSet(pMDX,.st)
    return:$$$ISERR(st) st
    
    set PageSize = 1000
    set CurrPage = 1
    set st = RS.%OutputJSON(PageSize,CurrPage,,PageSize)
    return st
]]></Implementation>
</Method>

<Method name="WriteDrillthroughJSON">
<Description><![CDATA[
Automatic processing of MDX Drillthrough query and outputting resulting listing as JSON.<br>
<b>pMDX</b> - String containing MDX Drillthrough query.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set RS = ..GetResultSet(pMDX,.st)
    return:$$$ISERR(st) st
    
    set SQL = RS.%GetListingSQL()
    do ##class(%ZEN.Auxiliary.jsonSQLProvider).%WriteJSONFromSQL(,SQL,,$$$MaxCacheInt)

    return $$$OK
]]></Implementation>
</Method>

<Method name="WriteXMLAfromMDX">
<Description><![CDATA[
Automatic processing of MDX query and outputting resulting XML/A.<br>
<b>pMDX</b> - String containing MDX query.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set RS = ..GetResultSet(pMDX,.st)
    return:$$$ISERR(st) st        
    
    set st = RS.%OutputXMLA()

    return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForMDX">
<Description><![CDATA[
Gets filters for MDX expression.<br>
<b>pMDX</b> - String containing MDX query.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMDX:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set RS = ..GetResultSet(pMDX,.st)
    return:$$$ISERR(st) st 
    
    set st=RS.%GetFiltersForCellRange(.filters,0,0,RS.%GetAxisSize(2),RS.%GetAxisSize(1),.measure)

    return st
]]></Implementation>
</Method>

<Method name="WriteFiltersForCube">
<Description><![CDATA[
Get all filters for DeepSee Cube in JSON format.<br>
<b>pCube</b> - name of DeepSee cube.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCube:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(%DeepSee.Dashboard.Utils).%GetFiltersForDataSource(pCube_".cube",.tFilters)
    return:$$$ISERR(st) st 
    return:($d(tFilters)=0) $$$ERROR($$$GeneralError,"Empty Filter values array. Cube does not exist?")
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("name","path","info"),.tFilters)
    return st
]]></Implementation>
</Method>

<Method name="WriteFilterValues">
<Description><![CDATA[
Get all values for Filter for DeepSee Cube in JSON format.<br>
<b>pCube</b> - name of DeepSee cube.<br>
<b>pFilter</b> - path of filter. For example: [DateOfSale].[Actual].[MonthSold]]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pCube:%String,pFilter:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set st = ##class(%DeepSee.Dashboard.Utils).%GetMembersForFilter(pCube,pFilter,.tFilters,.tDefaultFilterValue,,.tRelatedFilters,0,,.tValueList)
    return:$$$ISERR(st) st 
    
    set st = ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("name","value"),.tFilters)

    return st
]]></Implementation>
</Method>

<Method name="GetMdx">
<Description><![CDATA[
Returns MDX string used to create pivot.<br>
<b>pPivotName</b> - fullname of pivot. Eg: "KPIs & Plugins/HoleFoods.pivot". Case insensitive.<br>
<b>pStatus</b> - Status of query execution.<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pPivotName:%String,*pStatus:%Status=$$$OK</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    set tPivot = ##class(%DeepSee.UserLibrary.Utils).%OpenFolderItem(pPivotName,.pStatus)
    return:$$$ISERR(pStatus) $System.Status.GetErrorText(pStatus)

    set tPivotTable = ##class(%DeepSee.Component.pivotTable).%New()
    set st = tPivot.%CopyToComponent(tPivotTable)
    return:$$$ISERR(pStatus) $System.Status.GetErrorText(pStatus)

    set rs = tPivotTable.%CreateResultSet(.st,.tParms,.tFilterInfo,.tAdvancedFilters,.tQueryText)
    return:$$$ISERR(pStatus) $System.Status.GetErrorText(pStatus)
    
    set pMDX = tQueryText
    set pStatus = $$$OK
        
    return pMDX
]]></Implementation>
</Method>

<Method name="GetDataSource">
<ClassMethod>1</ClassMethod>
<FormalSpec>pDataSource:%String</FormalSpec>
<Implementation><![CDATA[
    
    set st = $$$OK
    try {
        
        if ($FIND(pDataSource, ".pivot") = ($LENGTH(pDataSource) + 1)) {
            &sql(
                SELECT TOP 1 ID into :sourceId
                FROM %DeepSee_Dashboard.Pivot
                WHERE fullName=:pDataSource
            )
            return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)
            
            set dataSource = ##class(%DeepSee.Dashboard.Pivot).%OpenId(sourceId,,.st)
            return:($$$ISERR(st)) st
            
            set st = ##class(%ZEN.Auxiliary.jsonProvider).%ObjectToJSON(dataSource, .out)
            
        }
         
    } catch ex {
        set st = ex.AsStatus()
    }
    
    return st
]]></Implementation>
</Method>

<Method name="GetWidgetsList">
<Description><![CDATA[
Using dashboard name get JSON representation (array of ("type","title","mdx")) of all its' widgets.<br>
<b>pDashName</b> - fullname of dashboard. Eg: "KPIs & Plugins/KPI with Listing.dashboard". Case insensitive.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDashName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim widgets As List Of %DeepSee.Dashboard.Widget
    #Dim widget As %DeepSee.Dashboard.Widget
    
    set st = $$$OK
    try {
        
        &sql(
            SELECT TOP 1 ID into :tDashId
            FROM %DeepSee_Dashboard.Definition
            WHERE fullName=:pDashName
        )
        return:(SQLCODE'=0) $$$ERROR($$$SQLError, SQLCODE)

        set dash = ##class(%DeepSee.Dashboard.Definition).%OpenId(tDashId,,.st)

        return:($$$ISERR(st)) st
        set widgets = dash.widgets.%ConstructClone("true")
        //Widget : {type, title, key, mdx}

        set widget = widgets.GetNext(.key)
        
        do {
            set out(key) =$lb(widget.subtype, widget.title, widget.key, ..GetMdx(widget.dataSource), widget.dataSource, widget.drillDownDataSource)
            set widget = widgets.GetNext(.key)
        } while (key'="")

        do ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("type","title","key","mdx","dataSource","drillDownDataSource"),.out)
        
    } catch ex {
        set st = ex.AsStatus()
    }
    return st
]]></Implementation>
</Method>

<Method name="Export">
<Description>
Export project
do ##class(MDX2JSON.Utils).Export()</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    set list = "MDX2JSON.ResultSet.cls,MDX2JSON.REST.cls,MDX2JSON.Utils.cls,MDX2JSON.MDX2JSON.inc"
    set path = "/InterSystems/Cache2014/csp/sys/mdx2json "_$ZSTRIP($ZDT($NOW(),3,2),"*",":-")_".xml"
    set st=$system.OBJ.Export(list,path)
    w $System.Status.GetErrorText(st)
    return st
]]></Implementation>
</Method>
</Class>
</Export>
