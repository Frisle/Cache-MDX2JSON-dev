<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25">
<Class name="MDX2JSON.Users">
<Description><![CDATA[
Class for Setting/Getting User <b>settings</b> for various <b>apps</b>.<br>
Can also export/import dettings to/from <b>files</b>.]]></Description>
<Super>%RegisteredObject</Super>
<TimeCreated>63669,64053.502396</TimeCreated>

<Method name="SetConfig">
<Description><![CDATA[
Set <b>App</b> configuration for <b>User</b> equal to <b>Config</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,Config:%String="",User:%String=$Username</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ns = $Namespace
	zn "%SYS"
	set Properties("Attributes",App)= $lb(Config)
	set st =##class(Security.Users).Modify(User,.Properties)
	zn ns
	return st
]]></Implementation>
</Method>

<Method name="SetConfigForAllUsers">
<Description><![CDATA[
Set <b>App</b> configuration for all Users equal to <b>Config</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,Config:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ns = $Namespace
	zn "%SYS"		
	return:'($$$IOwnAllRole) $$$ERROR($$$AccessDenied)
	
	set rs=##Class(%ResultSet).%New("Security.Users:List")
	set st = rs.Execute()
	while rs.Next() { 
		set st=$$$ADDSC(st,..SetConfig(App, Config, rs.Get("Name")))
	}
	zn ns
	return st
]]></Implementation>
</Method>

<Method name="GetConfig">
<Description><![CDATA[
Get <b>App</b> configuration for <b>User</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set ns = $Namespace
	zn "%SYS"
	set st =##class(Security.Users).Get(User,.Properties)
	zn ns
	return $lg($g(Properties("Attributes",App)))
]]></Implementation>
</Method>

<Method name="ExportConfig">
<Description><![CDATA[
Export <b>App</b> configuration for <b>User</b> to <b>File</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username,FileName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set config = ..GetConfig(App,User)
	set stream=##class(%Stream.FileCharacter).%New()
	set stream.TranslateTable="UTF8"
	set st=stream.LinkToFile(FileName)
	return:$$$ISERR(st) st
	set st=stream.Write(config)
	return:$$$ISERR(st) st
	set st=stream.%Save()
	return st
]]></Implementation>
</Method>

<Method name="ImportConfig">
<Description><![CDATA[
Import <b>App</b> configuration for <b>User</b> from <b>File</b>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>App:%String,User:%String=$Username,FileName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set stream=##class(%Stream.FileCharacter).%New()
	set stream.TranslateTable="UTF8"
	set st=stream.LinkToFile(FileName)
	return:$$$ISERR(st) st
	set config = ""
	while 'stream.AtEnd {
		set config = config _stream.Read()
	}
	set st = ..SetConfig(App,config,User)
	return st
]]></Implementation>
</Method>

<Method name="GetFavorites">
<Description>
Get Current user favorites</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set st = ##class(%DeepSee.UserPortal.Utils).%GetFavoritesForUser(.Favorites)
	return:$$$ISERR(st) st
	set st = ##class(%ZEN.Auxiliary.jsonProvider).%ArrayToJSON($lb("FullName","ShortName","Folder","Tip","Type","Icon","AddDate","URL"),.Favorites)
	return:$$$ISERR(st) st
	return $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
